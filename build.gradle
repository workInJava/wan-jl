buildscript {
    ext {
        springBootVersion = '2.4.1'

    }
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public" }
//        maven { url "http://repo.spring.io/snapshot" }
//        maven { url "http://repo.spring.io/milestone" }
        jcenter()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
plugins {
    id 'org.springframework.boot' version '2.1.0.RELEASE'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "jacoco"

    group = 'com.wan.jl'
    version = '1.0-SNAPSHOT'

    // JVM 版本号要求
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    bootJar {
        enabled = false  // 默认不需要打可执行jar包
    }
    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
    jar {
        manifest {
            attributes("Implementation-Title": "Gradle")
        }
    }
    configurations {
        providedRuntime
    }

    ext {
        springCloudVersion = 'Finchley.SR1'
    }

    repositories {
        mavenLocal()
       // mavenCentral()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        jcenter()
//        jar {
//            manifest.attributes provider: 'gradle'
//        }
    }


    // 显示当前项目下所有用于 compile 的 jar.
//    task listJars(description: 'Display all compile jars.') << {
//        configurations.compile.each { File file -> println file.name }
//    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    jacoco {
        toolVersion = "0.8.4"
        reportsDir = file("$buildDir/")
    }
    jacocoTestReport {
        reports {
            html.enabled true
            csv.enabled false
            xml.enabled false
            xml.destination file("$buildDir/jacocoXml.xml")
            html.destination file("$buildDir/jacocoHtml")
        }
        afterEvaluate {
            getClassDirectories().setFrom(
                    classDirectories.files.collect {
                        fileTree(dir: 'com/wan/jl',
                                exclude: [''])
                    }
            )
        }
    }
    test {
        include '**/*Test.class'
        exclude '**/**_Run.class'
        jacoco {
            destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
            classDumpDir = file("$buildDir/jacoco/classpathdumps")
        }
    }
}
